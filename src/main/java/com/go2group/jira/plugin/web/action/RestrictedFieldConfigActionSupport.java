package com.go2group.jira.plugin.web.action;// apache commonsimport java.util.ArrayList;import java.util.List;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.atlassian.jira.project.Project;import com.atlassian.jira.project.ProjectManager;import com.atlassian.jira.security.groups.GroupManager;import com.atlassian.jira.security.plugin.ProjectPermissionKey;import com.atlassian.jira.user.UserUtils;import com.atlassian.jira.web.action.JiraWebActionSupport;import com.go2group.jira.plugin.util.RestrictedFieldUtility;/** * handles basic configuration actions */public class RestrictedFieldConfigActionSupport extends JiraWebActionSupport {    /**     * logger     */    private static final Logger log = LoggerFactory.getLogger(RestrictedFieldConfigActionSupport.class);    /**     * user id param     */    private static final String PARAM_USER_ID = "userid";    /**     * group id param     */    private static final String PARAM_GROUP_ID = "groupid";    /**     * helper     */    private final RestrictedFieldUtility helper;    private final ProjectManager projectManager;    private final GroupManager groupManager;    // basic properties    private String projectkey = "";    private String configstep = "";    private String updateSuccesful = "No";    /**     * ctor     */    public RestrictedFieldConfigActionSupport(ProjectManager projectManager, GroupManager groupManager) {        helper = new RestrictedFieldUtility();        this.projectManager = projectManager;        this.groupManager = groupManager;    } // ctor    @Override    protected String doExecute() throws Exception {        updateSuccesful = "No";        ProjectPermissionKey projectPermissionKey = new ProjectPermissionKey("ADMINISTER_PROJECTS");        if (null != getActiveProject() && !hasProjectPermission(projectPermissionKey, getActiveProject())) {            log.warn("You do not have permission to configure the plugin");            addError(null, "You do not have permission to configure the plugin");            return ERROR;        } // no permission        if (null != getActiveProject() && null != request && StringUtils.isNotEmpty(configstep)) {            String[] userids = request.getParameterValues(PARAM_USER_ID);            List<String> users = new ArrayList<String>();            if (userids != null && userids.length > 0) {                for (String user : userids) {                    if (UserUtils.userExists(user)) {                        users.add(user);                    } else {                        addErrorMessage("Invalid user name:" + user);                    }                }            }            String[] groupids = request.getParameterValues(PARAM_GROUP_ID);            List<String> groups = new ArrayList<String>();            if (groupids != null && groupids.length > 0) {                for (String group : groupids) {                    if (this.groupManager.groupExists(group)) {                        groups.add(group);                    } else {                        addErrorMessage("Invalid group name:" + group);                    }                }            }            try {                helper.saveProjectConfig(getActiveProject(), users, groups);                updateSuccesful = "Yes";            } // try            catch (Exception e) {                log.warn("Unexpected error while saving project config: " + e.getMessage(), e);            } // catch        } // end if param set        else {            if (null == getActiveProject()) {                log.debug("No active project");            }            if (null == request) {                log.warn("No request");            }        } // no params        return SUCCESS;    } // doExecute    /**     * Get user list.     */    public List<String> getUserlist() {        List<String> users = new ArrayList<String>();        try {            if (null != getActiveProject()) {                users.addAll(helper.loadProjectUsers(getActiveProject()));            } // if        } // try        catch (Exception e) {            log.warn("Unexpected error while loading project config: " + e.getMessage(), e);        } // catch        return users;    } // getUserlist    /**     * Get group list.     */    public List<String> getGrouplist() {        List<String> groups = new ArrayList<String>();        try {            if (null != getActiveProject()) {                groups.addAll(helper.loadProjectGroups(getActiveProject()));            } // if        } // try        catch (Exception e) {            log.warn("Unexpected error while loading project config: " + e.getMessage(), e);        } // catch        return groups;    } // getGrouplist    public void setProjectkey(String s) {        this.projectkey = s;    }    public String getProjectkey() {        return projectkey;    }    private Project getActiveProject() {        return (null != projectkey) ? projectManager.getProjectObjByKey(projectkey) : null;    }    /**     * Get configstep.     *     * @return configstep as String.     */    public String getConfigstep() {        return configstep;    }    /**     * Set configstep.     *     * @param configstep     *            the value to set.     */    public void setConfigstep(String configstep) {        this.configstep = configstep;    }    public String isUpdateSuccesful() {        return updateSuccesful;    }    public void setUpdateSuccesful(String updateSuccesful) {        this.updateSuccesful = updateSuccesful;    }} // RestrictedFieldConfigActionSupport